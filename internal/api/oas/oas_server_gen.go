// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1CreateSignupUser implements V1_Create_Signup_User operation.
	//
	// Creates a signup user that will later be converted into an actual user.
	//
	// POST /v1/signup
	V1CreateSignupUser(ctx context.Context, req *V1CreateSignupUserReq) (*V1SignupUser, error)
	// V1GetUserByID implements v1_Get_User_By_ID operation.
	//
	// Returns a single user.
	//
	// GET /v1/users/{id}
	V1GetUserByID(ctx context.Context, params V1GetUserByIDParams) (V1GetUserByIDRes, error)
	// V1GetUserList implements v1_Get_User_List operation.
	//
	// Returns a single user.
	//
	// GET /v1/users
	V1GetUserList(ctx context.Context) (V1GetUserListRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
