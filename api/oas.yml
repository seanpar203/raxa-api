openapi: 3.0.2

servers:
  - url: /v1

info:
  version: 1.0.0
  title: Go API

tags:
  - name: signup
    description: Everything related to signup

  - name: users
    description: Everything related to users

paths:
  /v1/users:
    post:
      tags:
        - users
      summary: Creates a new user
      description: Creates and returns a new user
      operationId: V1_Users_Create
      requestBody:
        $ref: "#/components/requestBodies/V1CreateUserRequest"
      responses:
        '200':
          $ref: "#/components/responses/V1CreateUserResponse"
        '400':
          $ref: "#/components/responses/V1ErrorResponse"
  
  /v1/users/me:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Gets the current logged in user
      description: Gets the current user
      operationId: V1_Users_Me
      responses:
        '200':
          description: Returns the user that is currently logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1User"
        '400':
          $ref: "#/components/responses/V1ErrorResponse"      
    patch:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Updates the current logged in user
      description: Updates the current user
      operationId: V1_Users_Me_Update
      requestBody:
        $ref: "#/components/requestBodies/V1UpdateUserRequest"
      responses:
        '200':
          description: Returns the user that was just updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/V1User"
        '400':
          $ref: "#/components/responses/V1ErrorResponse"

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: UUID

  schemas:

    UUID:
      type: string
      example: "0c589d81-a70b-4e5d-81e9-4251ab97d2d0"

    V1User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@doe.com"
    
    V1Users:
      type: array
      items:
        $ref: '#/components/schemas/V1User'
  
  responses:
    V1ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
            
    V1CreateUserResponse:
      description: Response for creating a new user
      content:
        application/json:
          schema:
            type: object
            required:
              - access_token
              - refresh_token
              - user
            properties:
              access_token:
                $ref: '#/components/schemas/UUID'
              refresh_token:
                $ref: '#/components/schemas/UUID'
              user:
                $ref: '#/components/schemas/V1User'

  requestBodies:
    V1UpdateUserRequest:
      required: false
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string

    V1CreateUserRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: "john@doe.com"
              password:
                type: string